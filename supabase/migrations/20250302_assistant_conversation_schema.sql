-- Assistant conversational data model
-- Creates telemetry, conversation, message, and tool call tables with RLS policies.

-- Ensure pgcrypto is available for gen_random_uuid()
create extension if not exists pgcrypto;

-- =========
-- Conversations
-- =========

create table if not exists public.assistant_conversations (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null references auth.users (id) on delete cascade,
  trip_id uuid references public.user_trips (id) on delete set null,
  title text,
  status text not null default 'active' check (status in ('active', 'completed', 'archived')),
  started_at timestamptz not null default now(),
  last_turn_at timestamptz not null default now(),
  metadata jsonb default '{}'::jsonb
);

create index if not exists assistant_conversations_user_idx
  on public.assistant_conversations (user_id, last_turn_at desc);

create index if not exists assistant_conversations_trip_idx
  on public.assistant_conversations (trip_id);

alter table public.assistant_conversations
  enable row level security;

create policy "Users manage their own conversations"
  on public.assistant_conversations
  for all
  using (user_id = auth.uid())
  with check (user_id = auth.uid());

-- =========
-- Messages
-- =========

create table if not exists public.assistant_messages (
  id uuid primary key default gen_random_uuid(),
  conversation_id uuid not null references public.assistant_conversations (id) on delete cascade,
  user_id uuid references auth.users (id) on delete set null,
  role text not null check (role in ('system', 'user', 'assistant', 'tool')),
  content text not null,
  metadata jsonb default '{}'::jsonb,
  prompt_tokens integer,
  completion_tokens integer,
  total_tokens integer,
  cost_usd numeric(10, 6),
  created_at timestamptz not null default now()
);

create index if not exists assistant_messages_conversation_idx
  on public.assistant_messages (conversation_id, created_at);

create index if not exists assistant_messages_user_idx
  on public.assistant_messages (user_id, created_at);

alter table public.assistant_messages
  enable row level security;

create policy "Users access messages via owned conversations"
  on public.assistant_messages
  for all
  using (
    exists (
      select 1
      from public.assistant_conversations ac
      where ac.id = conversation_id
        and ac.user_id = auth.uid()
    )
  )
  with check (
    exists (
      select 1
      from public.assistant_conversations ac
      where ac.id = conversation_id
        and ac.user_id = auth.uid()
    )
  );

-- =========
-- Tool Calls (future automation)
-- =========

create table if not exists public.assistant_tool_calls (
  id uuid primary key default gen_random_uuid(),
  message_id uuid not null references public.assistant_messages (id) on delete cascade,
  tool_name text not null,
  arguments jsonb not null,
  response jsonb,
  status text not null default 'pending' check (status in ('pending', 'completed', 'failed')),
  error text,
  created_at timestamptz not null default now(),
  completed_at timestamptz
);

create index if not exists assistant_tool_calls_message_idx
  on public.assistant_tool_calls (message_id);

alter table public.assistant_tool_calls
  enable row level security;

create policy "Users view tool calls for their conversations"
  on public.assistant_tool_calls
  for select
  using (
    exists (
      select 1
      from public.assistant_messages am
      join public.assistant_conversations ac on ac.id = am.conversation_id
      where am.id = message_id
        and ac.user_id = auth.uid()
    )
  );

create policy "Users manage tool calls via owned conversations"
  on public.assistant_tool_calls
  for all
  using (
    exists (
      select 1
      from public.assistant_messages am
      join public.assistant_conversations ac on ac.id = am.conversation_id
      where am.id = message_id
        and ac.user_id = auth.uid()
    )
  )
  with check (
    exists (
      select 1
      from public.assistant_messages am
      join public.assistant_conversations ac on ac.id = am.conversation_id
      where am.id = message_id
        and ac.user_id = auth.uid()
    )
  );

-- =========
-- Telemetry / Cost Logging
-- =========

create table if not exists public.assistant_logs (
  id bigint generated by default as identity primary key,
  created_at timestamptz not null default now(),
  user_id uuid,
  conversation_id uuid references public.assistant_conversations (id) on delete set null,
  message_id uuid references public.assistant_messages (id) on delete set null,
  model text,
  prompt_tokens integer,
  completion_tokens integer,
  total_tokens integer,
  cost_usd numeric(10, 6),
  blocked boolean not null default false,
  block_reason text,
  metadata jsonb default '{}'::jsonb
);

create index if not exists assistant_logs_user_idx
  on public.assistant_logs (user_id, created_at desc);

create index if not exists assistant_logs_conversation_idx
  on public.assistant_logs (conversation_id, created_at desc);

-- Telemetry is written by service role; leave RLS disabled for this table.
